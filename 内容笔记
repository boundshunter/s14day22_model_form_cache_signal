内容详情：
    session 依赖于 cookie
    简洁的流程：
        用户来请求，登陆成功后，生成随机字符串，服务器端也保存起来，并且在保存起来的字符串里面也有个对应字典
        防止当前用户的所有信息

    1、session
        基于Cookie做用户验证时：敏感信息不适合放在cookie中


        a.Session原理
            Cookie是保存在用户浏览器端的键值对
            Session是保存在服务器端的键值对
            session流程：
                # 生成随机字符串
                # 写到用户浏览器cookie
                # 保存到session中
                # 在随机字符串对应的字典中设置相关内容

        b.Cookie和Session对比



        c. Session配置（缺少cache)



        d. 示例：实现两周自动登录
            - request.session.set_expiry(60*10)
            - SESSION_SAVE_EVERY_REQUEST = True


        PS: cookie中不设置超时时间，则表示关闭浏览器自动清除

    2、session的5种类型
        - 数据库（默认）
        - 缓存 memcache(默认不支持redis)
        - 文件
        - 缓存+数据库（先到缓存找，没有再去数据库找，存到缓存）
        - 加密cookie，其实就是cookie，加盐 salt

    3.ajax csrf
        - 只有POST才需要csrf


    4. Form 操作
        -验证用户请求
        -生成HTML（

        自定义：
            -类
            -字段（校验）
            -插件（生成HTML)

    7 缓存：
        5种配置
        3种应用:
            全局
            视图函数
            模板

作业：
    用户验证：session
    新URL方式：Form验证
    中间件：IP过滤
    信号:增加数据之前做日志记录
    CSRF
    缓存
